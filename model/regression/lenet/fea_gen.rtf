{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red193\green193\blue193;\red24\green24\blue24;\red140\green211\blue254;
\red202\green202\blue202;\red194\green126\blue101;\red167\green197\blue152;\red67\green192\blue160;\red212\green214\blue154;
\red89\green138\blue67;}
{\*\expandedcolortbl;;\cssrgb\c80000\c80000\c80000;\cssrgb\c12157\c12157\c12157;\cssrgb\c61176\c86275\c99608;
\cssrgb\c83137\c83137\c83137;\cssrgb\c80784\c56863\c47059;\cssrgb\c70980\c80784\c65882;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;
\cssrgb\c41569\c60000\c33333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf4 \strokec4 dataframe\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf4 \strokec4 dataframe\cf2 \strokec2 .dropna(\cf4 \strokec4 subset\cf5 \strokec5 =\cf2 \strokec2 [\cf6 \strokec6 "close"\cf2 \strokec2 ])   \cb1 \
\cb3  \cb1 \
\cb3     \cf4 \strokec4 diff5\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2   (\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close)\cf5 \strokec5 /\cf2 \strokec2 ((\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close).rolling(\cf7 \strokec7 5\cf2 \strokec2 ).mean())\cb1 \
\cb3     \cf4 \strokec4 diff10\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2   (\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close)\cf5 \strokec5 /\cf2 \strokec2 ((\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close).rolling(\cf7 \strokec7 10\cf2 \strokec2 ).mean())\cb1 \
\cb3     \cf4 \strokec4 diff20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2   (\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close)\cf5 \strokec5 /\cf2 \strokec2 ((\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close).rolling(\cf7 \strokec7 20\cf2 \strokec2 ).mean())\cb1 \
\cb3     \cf4 \strokec4 diff30\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2   (\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close)\cf5 \strokec5 /\cf2 \strokec2 ((\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close).rolling(\cf7 \strokec7 30\cf2 \strokec2 ).mean())\cb1 \
\cb3     \cf4 \strokec4 diff60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2   (\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close)\cf5 \strokec5 /\cf2 \strokec2 ((\cf4 \strokec4 dataframe\cf2 \strokec2 .volume\cf5 \strokec5 *\cf4 \strokec4 dataframe\cf2 \strokec2 .close).rolling(\cf7 \strokec7 60\cf2 \strokec2 ).mean())\cb1 \
\cb3     \cf4 \strokec4 diff_vmvg5\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 diff5\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diff_vmvg5'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_vmvg10\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 diff10\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diff_vmvg10'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_vmvg20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 diff20\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diff_vmvg20'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_vmvg30\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 diff30\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diff_vmvg30'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_vmvg60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 diff60\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diff_vmvg60'\cf2 \strokec2 )\cb1 \
\
\cb3     \cf4 \strokec4 mvg5\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 ema\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 5\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 mvg10\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 ema\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 10\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 mvg20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 ema\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 20\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 mvg60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 ema\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 60\cf2 \strokec2 )\cb1 \
\
\cb3     \cf10 \strokec10 # diff of filterd close price from bollinger upper bound and lower bound\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 upper_20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 20\cf2 \strokec2 ).mean()\cf5 \strokec5 +\cf2 \strokec2  \cf7 \strokec7 2\cf5 \strokec5 *\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 20\cf2 \strokec2 ).std())\cb1 \
\cb3     \cf4 \strokec4 lower_20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 20\cf2 \strokec2 ).mean()\cf5 \strokec5 -\cf2 \strokec2  \cf7 \strokec7 2\cf5 \strokec5 *\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 20\cf2 \strokec2 ).std())\cb1 \
\cb3     \cf4 \strokec4 upper_60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 60\cf2 \strokec2 ).mean()\cf5 \strokec5 +\cf2 \strokec2  \cf7 \strokec7 2\cf5 \strokec5 *\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 60\cf2 \strokec2 ).std())\cb1 \
\cb3     \cf4 \strokec4 lower_60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 60\cf2 \strokec2 ).mean()\cf5 \strokec5 -\cf2 \strokec2  \cf7 \strokec7 2\cf5 \strokec5 *\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close.rolling(\cf7 \strokec7 60\cf2 \strokec2 ).std())\cb1 \
\cb3     \cf4 \strokec4 diff_upper_20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 upper_20\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diffupper20'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_lower_20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 lower_20\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'difflower20'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_upper_60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 upper_60\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'diffupper60'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 diff_lower_60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 lower_60\cf2 \strokec2 , \cf4 \strokec4 name\cf5 \strokec5 =\cf2 \strokec2  \cf6 \strokec6 'difflower60'\cf2 \strokec2 )\cb1 \
\
\cb3     \cf10 \strokec10 # rsi\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 rsi_5\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 rsi\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 5\cf2 \strokec2 )\cf5 \strokec5 /\cf7 \strokec7 100\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 rsi_10\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 rsi\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 10\cf2 \strokec2 )\cf5 \strokec5 /\cf7 \strokec7 100\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 rsi_20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pta\cf2 \strokec2 .\cf9 \strokec9 rsi\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close, \cf7 \strokec7 20\cf2 \strokec2 )\cf5 \strokec5 /\cf7 \strokec7 100\cf2 \cb1 \strokec2 \
\cb3    \cb1 \
\cb3     \cf10 \strokec10 # slope\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 slope_5\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 dataframe\cf2 \strokec2 .close.shift(\cf7 \strokec7 5\cf2 \strokec2 ), \cf4 \strokec4 name\cf5 \strokec5 =\cf6 \strokec6 'slope_5'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 slope_10\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 dataframe\cf2 \strokec2 .close.shift(\cf7 \strokec7 10\cf2 \strokec2 ), \cf4 \strokec4 name\cf5 \strokec5 =\cf6 \strokec6 'slope_10'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 slope_20\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 dataframe\cf2 \strokec2 .close.shift(\cf7 \strokec7 20\cf2 \strokec2 ), \cf4 \strokec4 name\cf5 \strokec5 =\cf6 \strokec6 'slope_20'\cf2 \strokec2 )\cb1 \
\cb3     \cf4 \strokec4 slope_60\cf2 \strokec2  \cf5 \strokec5 =\cf2 \strokec2  \cf8 \strokec8 pd\cf2 \strokec2 .\cf8 \strokec8 Series\cf2 \strokec2 (\cf4 \strokec4 dataframe\cf2 \strokec2 .close\cf5 \strokec5 /\cf4 \strokec4 dataframe\cf2 \strokec2 .close.shift(\cf7 \strokec7 60\cf2 \strokec2 ), \cf4 \strokec4 name\cf5 \strokec5 =\cf6 \strokec6 'slope_60'\cf2 \strokec2 )\cb1 \
}